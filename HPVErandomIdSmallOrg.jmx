<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Publish Events to EMP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(host,eap-data-streamer.r1.us1.perf.iq.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOGINPATH" elementType="Argument">
            <stringProp name="Argument.name">LOGINPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/Soap/c)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESTPATH" elementType="Argument">
            <stringProp name="Argument.name">RESTPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENTITYPATH" elementType="Argument">
            <stringProp name="Argument.name">ENTITYPATH</stringProp>
            <stringProp name="Argument.value">${__P(entitypath,sobjects/alert__e)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APITYPE" elementType="Argument">
            <stringProp name="Argument.name">APITYPE</stringProp>
            <stringProp name="Argument.value">${__P(apitype,composite)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIVERSION" elementType="Argument">
            <stringProp name="Argument.name">APIVERSION</stringProp>
            <stringProp name="Argument.value">${__P(apiversion,48.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(password,test1234)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_TIME_IN_S" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_TIME_IN_S</stringProp>
            <stringProp name="Argument.value">${__P(jmeter_ramp_up_time_in_s,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THROUGHPUT_PER_MIN" elementType="Argument">
            <stringProp name="Argument.name">THROUGHPUT_PER_MIN</stringProp>
            <stringProp name="Argument.value">${__P(throughput_per_min,10500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME" elementType="Argument">
            <stringProp name="Argument.name">TIME</stringProp>
            <stringProp name="Argument.value">${__time(,curTime)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATASETUP_PATH" elementType="Argument">
            <stringProp name="Argument.name">DATASETUP_PATH</stringProp>
            <stringProp name="Argument.value">/Users/sperla/Downloads</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORGANDHVSFIELDS" elementType="Argument">
            <stringProp name="Argument.name">ORGANDHVSFIELDS</stringProp>
            <stringProp name="Argument.value">${__P(input_file,/Users/sperla/Desktop/EAP-Perf-Scripts-master/datasetup/CreateHVPEByOrgType/inputfiles/cadence.all_users_small.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAILOPEN_VOLUME" elementType="Argument">
            <stringProp name="Argument.name">EMAILOPEN_VOLUME</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="HVS Engagement Static Values" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="LocationCity" elementType="Argument">
            <stringProp name="Argument.name">LocationCity</stringProp>
            <stringProp name="Argument.value">San Francisco</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LocationStateCode" elementType="Argument">
            <stringProp name="Argument.name">LocationStateCode</stringProp>
            <stringProp name="Argument.value">CA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LocationCountryCode" elementType="Argument">
            <stringProp name="Argument.name">LocationCountryCode</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserAgent" elementType="Argument">
            <stringProp name="Argument.name">UserAgent</stringProp>
            <stringProp name="Argument.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML like Gecko) Chrome/77.0.3865.90 Safari/537.36</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Device" elementType="Argument">
            <stringProp name="Argument.name">Device</stringProp>
            <stringProp name="Argument.value">Macbook Pro</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CreateEngagements" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP_TIME_IN_S}</stringProp>
        <longProp name="ThreadGroup.start_time">1490329943000</longProp>
        <longProp name="ThreadGroup.end_time">1490329943000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="OrgANDHVSFIELDS" enabled="true">
          <stringProp name="filename">${ORGANDHVSFIELDS}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">orgid,username,userid,leadid20,leadid60,contactid20,contactid60,actioncadencestep20Lead,actioncadencestep60Lead,actioncadencesteptracker20Lead,actioncadencesteptracker60Lead,actioncadencestep20Contact,actioncadencestep60Contact,actioncadencesteptracker20Contact,actioncadencesteptracker60Contact,taskid,eventid_lead_20,eventid_lead_60,eventid_contact_20,eventid_contact_60,emailmessageid_60contact,emailmessageid_20contact,emailmessageid_60lead,emailmessageid_20lead,templateid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Per Thread" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login using SOAP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &#xd;
   &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; &#xd;
                  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#xd;
                  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt; &#xd;
      &lt;soap:Body&gt; &#xd;
         &lt;login xmlns=&quot;urn:enterprise.soap.sforce.com&quot;&gt; &#xd;
            &lt;username&gt;${username}&lt;/username&gt; &#xd;
            &lt;password&gt;${PASSWORD}&lt;/password&gt; &#xd;
         &lt;/login&gt; &#xd;
      &lt;/soap:Body&gt; &#xd;
   &lt;/soap:Envelope&gt; </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LOGINPATH}/${APIVERSION}/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">login</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">NOSESSIONFOUND</stringProp>
              <stringProp name="XPathExtractor.refname">SESSIONID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/loginResponse/result/sessionId</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="Scope.variable">SESSIONID</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
            </XPathExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-845505811">NOSESSIONFOUND</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">SESSIONID</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Login Successful Then Publish" enabled="false">
          <stringProp name="IfController.condition">&quot;${SESSIONID}&quot; != &quot;NOSESSIONFOUND&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">emailopen_counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Publish Events" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;//necessary import

log.info(&quot;${emailopen_counter}&quot;);
////////////////////////////////////////////////////////////////////////////
int leadorcontact = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, 2);
int twentyor60 = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, 2);
int vehicleindex = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, 3); // 0 = task, 1 = eventid, 2 = email msg
String chvid=RandomStringUtils.randomAlphanumeric(18); 
String tempid=RandomStringUtils.randomAlphanumeric(18); 
String wsid=RandomStringUtils.randomAlphanumeric(18); 
if(leadorcontact == 0) { // lead
	if(twentyor60 == 0) { // twenty
		vars.put(&quot;WorkflowStep&quot;, vars.get(&quot;actioncadencestep20Lead&quot;));
		vars.put(&quot;WorkflowStepTracker&quot;, vars.get(&quot;actioncadencesteptracker20Lead&quot;));
		vars.put(&quot;TargetId&quot;, vars.get(&quot;leadid20&quot;));
		if(vehiclearr == 0) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;taskid&quot;));
		} else if(vehiclearr == 1) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;eventid_lead_20&quot;));
		} else {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;emailmessageid_20lead&quot;));
		}
	} else 
	{
		vars.put(&quot;WorkflowStep&quot;, vars.get(&quot;actioncadencestep60Lead&quot;));
		vars.put(&quot;WorkflowStepTracker&quot;, vars.get(&quot;actioncadencesteptracker60Lead&quot;));
		vars.put(&quot;TargetId&quot;, vars.get(&quot;leadid60&quot;));
		if(vehiclearr == 0) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;taskid&quot;));
		} else if(vehiclearr == 1) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;eventid_lead_60&quot;));
		} else {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;emailmessageid_60lead&quot;));
		}	
	}
} else {
	if(twentyor60 == 0) {
		vars.put(&quot;WorkflowStep&quot;, vars.get(&quot;actioncadencestep20Contact&quot;));
		vars.put(&quot;WorkflowStepTracker&quot;, vars.get(&quot;actioncadencesteptracker20Contact&quot;));
		vars.put(&quot;TargetId&quot;, vars.get(&quot;contactid20&quot;));
		if(vehiclearr == 0) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;taskid&quot;));
		} else if(vehiclearr == 1) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;eventid_contact_20&quot;));
		} else {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;emailmessageid_20contact&quot;));
		}
	} else 
	{
		vars.put(&quot;WorkflowStep&quot;, vars.get(&quot;actioncadencestep60Contact&quot;));
		vars.put(&quot;WorkflowStepTracker&quot;, vars.get(&quot;actioncadencesteptracker60Contact&quot;));
		vars.put(&quot;TargetId&quot;, vars.get(&quot;contactid60&quot;));
		if(vehiclearr == 0) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;taskid&quot;));
		} else if(vehiclearr == 1) {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;eventid_contact_60&quot;));
		} else {
			vars.put(&quot;ChannelVehicle&quot;, vars.get(&quot;emailmessageid_60contact&quot;));
		}
	}
}

vars.put(&quot;WorkflowStep&quot;, RandomStringUtils.randomAlphanumeric(18));
vars.put(&quot;ChannelVehicle&quot;, RandomStringUtils.randomAlphanumeric(18));
vars.put(&quot;templateid&quot;, RandomStringUtils.randomAlphanumeric(18));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <intProp name="calcMode">4</intProp>
            <stringProp name="throughput">${THROUGHPUT_PER_MIN}</stringProp>
          </ConstantThroughputTimer>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Email Send" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">import java.util.UUID;

String uuid = UUID.randomUUID().toString();
vars.put(&quot;ESUUID&quot;,uuid);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EmailSend" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
&#xd;
{&#xd;
    &quot;EngagementDateTime&quot;: &quot;2019-11-06T21:33:15.000Z&quot;,&#xd;
    &quot;ChannelType&quot;: &quot;Call&quot;,&#xd;
    &quot;ChannelAction&quot;: &quot;MeaningfulConnect&quot;,&#xd;
    &quot;ChannelVehicleId&quot;: &quot;02sxx0000004G1LAAU&quot;,&#xd;
    &quot;TargetId&quot;: &quot;00Qxx000002TSswEAG&quot;,&#xd;
    &quot;TargetNameDenorm&quot;: &quot;asdfdd&quot;,&#xd;
    &quot;UserId&quot;: &quot;005xx000001X9AvAAK&quot;,&#xd;
    &quot;WorkflowStepId&quot;: &quot;8C8xx0000004CIjCAM&quot;,&#xd;
    &quot;WorkflowStepTrackerId&quot;: &quot;8HFxx0000004CKKGA2&quot;,&#xd;
    &quot;WorkflowNameDenorm&quot;: &quot;asdf&quot;,&#xd;
    &quot;Id&quot;: &quot;1a9xx000000009hAAA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Email Reply" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email Reply" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ChannelAction&quot;: &quot;Reply&quot;,&#xd;
	&quot;ChannelType&quot;: &quot;Email&quot;,&#xd;
	&quot;ChannelVehicleId&quot;: &quot;${ChannelVehicle}&quot;,&#xd;
	&quot;TargetId&quot;: &quot;${TargetId}&quot;,&#xd;
	&quot;TemplateId&quot;: &quot;${templateid}&quot;,&#xd;
	&quot;WorkflowStepId&quot;: &quot;${WorkflowStep}&quot;,&#xd;
	&quot;WorkflowStepTrackerId&quot;: &quot;${WorkflowStepTracker}&quot;,&#xd;
	&quot;UserId&quot;: &quot;${userid}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="EmailOpen" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EmailOpen" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ChannelAction&quot;: &quot;Open&quot;,&#xd;
	&quot;ChannelType&quot;: &quot;Email&quot;,&#xd;
	&quot;ChannelVehicleId&quot;: &quot;${ChannelVehicle}&quot;,&#xd;
	&quot;TargetId&quot;: &quot;${TargetId}&quot;,&#xd;
	&quot;TemplateId&quot;: &quot;${templateid}&quot;,&#xd;
	&quot;WorkflowStepId&quot;: &quot;${WorkflowStep}&quot;,&#xd;
	&quot;WorkflowStepTrackerId&quot;: &quot;${WorkflowStepTracker}&quot;,&#xd;
	&quot;UserAgent&quot;: &quot;${UserAgent}&quot;,&#xd;
	&quot;Device&quot;: &quot;${Device}&quot;,&#xd;
	&quot;LocationCity&quot;: &quot;${LocationCity}&quot;,&#xd;
	&quot;LocationStateCode&quot;: &quot;${LocationStateCode}&quot;,&#xd;
	&quot;LocationCountryCode&quot;: &quot;${LocationCountryCode}&quot;,&#xd;
	&quot;UserId&quot;: &quot;${userid}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LinkClick" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LinkClick" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ChannelAction&quot;: &quot;LinkClick&quot;,&#xd;
	&quot;ChannelType&quot;: &quot;Email&quot;,&#xd;
	&quot;ChannelVehicleId&quot;: &quot;${ChannelVehicle}&quot;,&#xd;
	&quot;TargetId&quot;: &quot;${TargetId}&quot;,&#xd;
	&quot;TemplateId&quot;: &quot;${templateid}&quot;,&#xd;
	&quot;WorkflowStepId&quot;: &quot;${WorkflowStep}&quot;,&#xd;
	&quot;WorkflowStepTrackerId&quot;: &quot;${WorkflowStepTracker}&quot;,&#xd;
	&quot;UserAgent&quot;: &quot;${UserAgent}&quot;,&#xd;
	&quot;Device&quot;: &quot;${Device}&quot;,&#xd;
	&quot;LocationCity&quot;: &quot;${LocationCity}&quot;,&#xd;
	&quot;LocationStateCode&quot;: &quot;${LocationStateCode}&quot;,&#xd;
	&quot;LocationCountryCode&quot;: &quot;${LocationCountryCode}&quot;,&#xd;
	&quot;UserId&quot;: &quot;${userid}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="HardBounce" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HardBounce" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ChannelAction&quot;: &quot;HardBounce&quot;,&#xd;
	&quot;ChannelType&quot;: &quot;Email&quot;,&#xd;
	&quot;ChannelVehicleId&quot;: &quot;${ChannelVehicle}&quot;,&#xd;
	&quot;TargetId&quot;: &quot;${TargetId}&quot;&#xd;
	&quot;TemplateId&quot;: &quot;${templateid}&quot;,&#xd;
	&quot;WorkflowStepId&quot;: &quot;${WorkflowStep}&quot;,&#xd;
	&quot;WorkflowStepTrackerId&quot;: &quot;${WorkflowStepTracker}&quot;,&#xd;
	&quot;UserId&quot;: &quot;${userid}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="SoftBounce" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SoftBounce" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;ChannelAction&quot;: &quot;SoftBounce&quot;,&#xd;
	&quot;ChannelType&quot;: &quot;Email&quot;,&#xd;
	&quot;ChannelVehicleId&quot;: &quot;${ChannelVehicle}&quot;,&#xd;
	&quot;TargetId&quot;: &quot;${TargetId}&quot;,&#xd;
	&quot;TemplateId&quot;: &quot;${templateid}&quot;,&#xd;
	&quot;WorkflowStepId&quot;: &quot;${WorkflowStep}&quot;,&#xd;
	&quot;WorkflowStepTrackerId&quot;: &quot;${WorkflowStepTracker}&quot;,&#xd;
	&quot;UserId&quot;: &quot;${userid}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">aiq/v${APIVERSION}/test/orgs/${orgid}/pushHvsEngagementEvent</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">sfdcUserId</stringProp>
                    <stringProp name="Header.value">${userid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cache-control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
